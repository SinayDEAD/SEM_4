SparseMatrix -
Разреженная матрица, в которой только те местоположения, которые были заданы значениями 
!=, фактически существуют и потребляют память, а все остальные местоположения в разреженной матрице представлены в виде нулей.



Каждый элемент представляет собой элемент stuct, который содержит значение и расположение столбца, в котором он должен существовать. Каждая строка в SparseMatrix является объектом Списка элементов, который представляет собой связанный список, содержащий объекты элементов.


Последовательность действий:

Конструктор матрицы создаёт "rows" из "new ElementList[n]", где n - кол-во рядов, где "maxCols = max; list = nullptr;"
Затем вызывается " Put" c  "list = nullptr; maxCols = max;", где m - кол-во столбцов

Затем при присвоении значения в конечном итоге создается "new Element(col,0, list);" из номера колоны, пока что значения 0 и ссылка на следующий элемент, и возвращается "newNode->value" 

Далее все операции проходят либо такой же путь либо всё ещё проще - возвращают какое-то значение


Список возможностей:

SparseMatrix operator = (const SparseMatrix &rhs);
SparseMatrix operator + (const SparseMatrix &rhs) const;
SparseMatrix operator * (const SparseMatrix &rhs) const;
friend bool operator == (const SparseMatrix& mtrx1, const SparseMatrix& mtrx2);
friend bool operator != (const SparseMatrix& mtrx1, const SparseMatrix& mtrx2);

Возможность вернуть или присвоить значение через [][] либо **

size_t num_columns() const;
size_t num_rows() const;
    
double get(size_t i, size_t j)const;
void set(size_t i, size_t j , double a);

friend ostream &operator << (ostream &out, SparseMatrix matrix); //вывод матрицы 



Из минусов:
Программа вообще не обрабатывает проблемные ситуации, при них начиняется вылет и аварии, так что просьба, не вводите заведомо ошибочные действия)




























































ЗАПУСКАЕМ░░
░ГУСЯ░▄▀▀▀▄░ГИДРУ░░
▄███▀░◐░▄▀▀▀▄░░░� �░░
░░▄███▀░◐░░░░▌░░� �
░░░▐░▄▀▀▀▄░░░▌░░� �░
▄███▀░◐░░░▌░░▌░░� �░
░░░░▌░░░░░▐▄▄▌░░� �░░
░░░░▌░░░░▄▀▒▒▀▀▀� �▄
░░░▐░░░░▐▒▒▒▒▒▒▒� �▀▀▄
░░░▐░░░░▐▄▒▒▒▒▒▒� �▒▒▒▀▄
░░░░▀▄░░░░▀▄▒▒▒▒� �▒▒▒▒▒▀▄
░░░░░░▀▄▄▄▄▄█▄▄▄� �▄▄▄▄▄▄▄▀▄
░░░░░░░░░░░▌▌░▌▌� �░░░░
░░░░░░░░░░░▌▌░▌▌� �░░░░
░░░░░░░░░▄▄▌▌▄▌▌� �░░░░